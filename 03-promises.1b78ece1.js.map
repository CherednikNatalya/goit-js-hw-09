{"mappings":"AAWiBA,SAASC,cAAc,iBAgExCC,QAAQC,IAAI,IAAIC,KAAK,eACrBF,QAAQC,IAAI,IAAIC,KAAK,YACrBF,QAAQC,IAAI,IAAIC,KAAK,SAErB,MAAMC,EAAYC,aAAY,W,GAE3B,KAEGC,EAAYD,aAAY,W,GAE3B,KAEGE,EAAYF,aAAY,W,GAE3B,KAEHJ,QAAQC,IAAIE,GACZH,QAAQC,IAAIK,GACZN,QAAQC,IAAII","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n\n\nconst timerRef = document.querySelector('.timer__items');\n\nconst timer = {\n  intervalId: null,\n  refs: {},\n  notifyOptions: {\n    position: 'center-center',\n    backOverlay: true,\n    clickToClose: true,\n    closeButton: true,\n  },\n  start(rootSelector, deadline) {\n    const delta = deadline.getTime() - Date.now();\n    if (delta <= 0) {\n      Notify.failure(\n        'Вибраний час в минулому, виберіть дату в майбутньому!',\n        this.notifyOptions\n      );\n      return;\n    }\n    Notify.success('Відлік почався', this.notifyOptions);\n    this.getRefs(rootSelector);\n    this.intervalId = setInterval(() => {\n      const diff = deadline.getTime() - Date.now();\n\n      if (diff <= 1000) {\n        clearInterval(this.intervalId);\n        Notify.success('Дедлайн настав!', this.notifyOptions);\n      }\n\n      const data = this.convertMs(diff);\n      //   Object.entries(data).forEach(([name, value]) => {\n      //     this.refs[name].textContent = this.addLeadinZero(value);\n      //   });\n      this.refs.days.textContent = this.addLeadinZero(data.days);\n      this.refs.hours.textContent = this.addLeadinZero(data.hours);\n      this.refs.minutes.textContent = this.addLeadinZero(data.minutes);\n      this.refs.seconds.textContent = this.addLeadinZero(data.seconds);\n    }, 1000);\n  },\n\n  getRefs(rootSelector) {\n    // [...rootSelector.children].forEach(item => {\n    //   const { title } = item.dataset;\n    //   this.refs[title] = item;\n    // });\n    this.refs.days = rootSelector.querySelector('.js-timer__days');\n    this.refs.hours = rootSelector.querySelector('.js-timer__hours');\n    this.refs.minutes = rootSelector.querySelector('.js-timer__minutes');\n    this.refs.seconds = rootSelector.querySelector('.js-timer__seconds');\n  },\n  convertMs(diff) {\n    const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n    const hours = Math.floor(diff / 1000 / 60 / 60) % 24;\n    const minutes = Math.floor(diff / 1000 / 60) % 60;\n    const seconds = Math.floor(diff / 1000) % 60;\n    return { days, hours, minutes, seconds };\n  },\n  addLeadinZero(value) {\n    return String(value).padStart(2, '0');\n  },\n};\n\n// timer.start(timerRef, TIMER_DEADLINE);\nconsole.log(new Date('2030-03-16'));\nconsole.log(new Date('2030-03'));\nconsole.log(new Date('2018'));\n\nconst interval1 = setInterval(function () {\n  // body\n}, 1000);\n\nconst interval2 = setInterval(function () {\n  // body\n}, 1000);\n\nconst interval3 = setInterval(function () {\n  // body\n}, 1000);\n\nconsole.log(interval1);\nconsole.log(interval3);\nconsole.log(interval2);\n"],"names":["document","querySelector","console","log","Date","$47d4ff9957288465$var$interval1","setInterval","$47d4ff9957288465$var$interval2","$47d4ff9957288465$var$interval3"],"version":3,"file":"03-promises.1b78ece1.js.map"}